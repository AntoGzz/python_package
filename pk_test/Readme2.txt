Crea tu primer paquete Open Source con Python
En esta gu√≠a aprender√°s c√≥mo crear tus paquetes Open source utilizando Python y subirlo a los repositorios de PyPI.

Para fines pr√°cticos, la gu√≠a tiene como objetivo crear un CLI con Python capas de consumir los diferentes endpoints del API oficial de C√≥digoFacilito. üêä

REQUERIMIENTOS. üïµÔ∏è‚Äç‚ôÄÔ∏è
Para poder seguir esta gu√≠a, ser√° necesario cuentes con los siguientes requerimientos.

Cuenta activa en Github.
Cuenta activa en PyPI.
Conocimientos b√°sicos de Python.
Alcance de tu proyecto.
Nombre de tu proyecto.
ALCANCE DEL PROYECTO
El primer paso, y quiz√°s el m√°s dif√≠cil, es sin duda alguna identificar el alcance que tendr√° nuestro proyecto.

S√© que desde un principio queremos liberar un proyecto 100% "terminado", que cumpla con todos los requerimientos que hemos planteado y solvente todas las problem√°ticas expuestas. Sin embargo, desarrollar un software con estas caracter√≠sticas es algo costoso, tanto en tiempo como financieramente. üò±

Por lo tanto te recomiendo versiones tu proyecto; de esta forma, con cada nueva versi√≥n liberada, podr√°s ir iterando sobre el proyecto, resolviendo bugs y a√±adiendo nuevas funcionalidades.

Esto no solo te permitir√° escuchar las necesidades de tus usuarios, si no adem√°s, te permitir√° definir nuevos objetivos a cumplir. Objetivos que quiz√°s no hayas planteado en primera instancias.

Recuerda, Roma no se construyo en un d√≠a. No importa si tu proyecto se encuentra "terminado" en la versi√≥n 2 o en la versi√≥n 1024. üòé

NOMBRE DEL PROYECTO
A diferencia de lo que muchos podemos llegar a pensar, el nombre de nuestro proyecto es fundamental para su √©xito.

S√≠ queremos que el proyecto sea usados por miles de desarrolladores(as) al rededor del mundo, debemos asegurarnos que el nombre sea f√°cil de recordar.

Te recomiendo utilizar nombres cortos y concisos. Esto te puede asegurar un mayor alcance en el motor de b√∫squeda de PyPI.

Si quieres conocer si el nombre que estas pensando aun se encuentra disponible, recuerda que siempre puedes buscarlo en el sitio oficial de PyPI.

ESTRUCTURA
Una vez definido el alcance y el nombre del proyecto, lo siguiente que debemos hacer ser√° comenzar con el proceso de desarrollo.

Te recomiendo utilicemos la siguiente estructura para tu proyecto.

root/
‚îÇ
‚îú‚îÄ‚îÄ env/
‚îú‚îÄ‚îÄ <Paquete>/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ __main__.py
‚îÇ
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ test.py
‚îÇ
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ main.py
Es una estructura b√°sica, pero sumamente eficiente. ü§†

T√∫ deber√°s colocar el nombre que desees para tu paquete.

PREPARACI√ìN DEL PROYECTO
Lo primero ser√° crear nuestro entorno virtual. Para ello ejecutamos el siguiente comando en consola.

python -m venv env
Esto crear√° la carpeta env dentro del directorio.

Una vez con la carpeta creada, lo siguiente ser√° activar el entorno.

Windows.

env\Scripts\activate
Linux.

source env/bin/activate
Una vez el entorno se encuentre activado ya podremos instalar todas las dependencias que nuestro proyecto necesite.

Para este tutorial ser√° necesario instalar la librer√≠a de requests.

pip install requests
Siempre que instalemos o desinstalemos alguna dependencia, ser√° necesario registrar estos cambios en el archivo requirements.txt,.

pip freeze > requirements.txt
Para evitar que archivos innecesarios se alojen en el repositorio, debemos configurar el archivo .gitignore. Te recomiendo utilices el archivo gitignore que hemos creado en C√≥digoFacilito.

Para el archivo README.md debemos detallar el funcionamiento de nuestro paquete. Este archivo servir√° como la documentaci√≥n del proyecto. üòé

Te recomiendo ampliamente te tomes el tiempo necesario para este archivo. Entre m√°s detallada se encuentre la documentaci√≥n, ser√° m√°s sencillo para nuestros usuarios poder implementar nuestro software.

Si el tema de la documentaci√≥n supone un reto para ti, te recomiendo el curso


Fundamentos de escritura para prog...

88%

Equipo C√≥digo Facilito

1h 19m
Ir al curso
" target="_blank">Fundamentos de escritura para programadores. En este curso te ense√±amos c√≥mo utilizar Markdown y como redactar de mejor manera.
Listo, una vez con lo archivos b√°sicos configurados, ya podemos alojar nuestro proyecto en el repositorio de Git. Aqu√≠ un tutorial de c√≥mo hacerlo.

DESARROLLO
Lo siguiente que debemos hacer ser√° comenzar con el desarrollo. Toda nuestra l√≥gica de programaci√≥n (Variables, constantes, funciones, clases, m√©todos, etc... ) Deber√°s encontrarse dentro del paquete.

En mi caso, he creado el archivo workshops.py, que ser√° uno de los m√≥dulos de mi paquete.

‚îú‚îÄ‚îÄ <Paquete>/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ __main__.py
‚îÇ   ‚îú‚îÄ‚îÄ workshops.py
Este archivo tiene la finalidad de poder consumir todos los EndPoints relacionados con talleres.

workshops.py.

import requests

def unreleased():
    response = requests.get('https://codigofacilito.com/api/v2/workshops/unreleased')

    if response.status_code == 200:
        payload = response.json() 
        return payload['data']
Para exponer la funcionalidad de nuestro m√≥dulo lo haremos a trav√©s del archivo __init__.

from codigofacilito.workshops import unreleased
Una vez con el import realizado debemos testear el paquete utilizando el archivo __main__.

Aqu√≠ un ejemplo de c√≥mo hacerlo.

import logging

from codigofacilito import unreleased

logging.basicConfig(level=logging.INFO)

def main():
    logging.info(unreleased())


if __name__ == '__main__':
    logging.debug('>>> Estamos comenzando la ejecuci√≥n del paquete.')

    main()

    logging.debug('>>> Estamos finalizando la ejecuci√≥n del paquete.')
En consola ejecutaremos el siguiente comando.

python -m <El nombre de nuestro paquete>
Si todo ha salido bien deber√≠amos visualizar en consola la respuesta por parte del servidor (Para mi ejemplo el listado de pr√≥ximos talleres).

Recuerda mantener actualizado tu repositorio Git en todo momento. Commits peque√±os para cada nueva funcionalidad estar√°n bastante bien. ü§ñ

ARCHIVOS DE CONFIGURACI√ìN
Una vez hayamos confirmado que nuestro paquete funciona adecuadamente, lo siguiente ser√° preparar el proyecto para su despliegue.

Para ello vamos a crear 2 nuevos archivos.

setup.py
LICENSE.txt.
Para el archivo setup.py te recomiendo copies y pegues la siguiente estructura. Deber√°s definir tus propios valores para las constantes.

from pathlib import Path
from setuptools import setup

this_directory = Path(__file__).parent
long_description = (this_directory / "README.md").read_text()

VERSION = '0.0.1'
DESCRIPTION = 'Description'
PACKAGE_NAME = 'Package Name'
AUTHOR = ''
EMAIL = ''
GITHUB_URL = ''

setup(
    name = PACKAGE_NAME,
    packages = [PACKAGE_NAME],
    version = VERSION,
    license='MIT',
    description = DESCRIPTION,
    long_description_content_type="text/markdown",
    long_description=long_description,
    author = AUTHOR,
    author_email = EMAIL,
    url = GITHUB_URL,
    keywords = [],
    install_requires=[ 
        'requests',
    ],
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Build Tools',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3',
    ],
)
Y para el archivo LICENSE.txt, deber√°s colocar la licencia que desees tu proyecto posea.

En mi caso estar√© utilizando la licencia MIT, que podr√°s encontrar en el repositorio de C√≥digoFacilito.

DESPLIEGUE
El archivo setup.py tiene como finalidad poder configurar nuestro proyecto para su release. Por lo tanto, una vez hayamos creado y configurado los archivos setup.py y LICENSE.txt, lo siguiente ser√° crear un archivo con extensi√≥n .tar.gz. Para ello ejecutamos el siguiente comando.

python setup.py sdist
Esto va a crear la carpeta dist dentro del directorio. Ser√° dentro de esta carpeta donde se encontrar√° el archivo .tar.gz. El archivo seguir√° la siguiente estructura por nombre.

<Nombre del paquete>-<version>.tar.gz
Este ser√° el archivo que debemos subir al repositorio de PyPI. üôå

Ahora, vamos a instalar la librer√≠a twine.

Primero actualizamos pip.

pip install pip --upgrade
Instalamos twine.

pip install twine
Para hacer el despliegue ejecutamos el siguiente comando.

twine upload dist/*
Este comando nos pedir√° el username y password de nuestra cuenta PyPI.

Si todo ha salido bien, deber√≠amos ver en consola el link del proyecto en PyPI, listo para ser utilizando por la comunidad Python. ü§†

NUEVAS VERSIONES üî•
Para finalizar la gu√≠a aprenderemos a actualizar nuestro proyecto.

Recordemos que ahora nuestro proyecto se encuentra versionado. Esto lo hemos definido mediante la constante VERSION del archivo setup.py. Por lo tanto, para poder liberar una nueva versi√≥n del proyecto debemos modificar esta constate.

Las versiones siempre son auto incrementales en 1, as√≠ que te invito mantengas la convenci√≥n.

Pasar de la versi√≥n 0.0.1 a al versi√≥n 0.0.10 (Por ejemplo) puede causar problemas en el despliegue.

Para mi segunda versi√≥n lo que har√© ser√° implementar el CLI.

En el archivo setup.py a√±adimos una nueva entrada: entry_points.

VERSION = '0.0.2'

setup(
    name = PACKAGE_NAME,
    packages = [PACKAGE_NAME],
    entry_points={
        "console_scripts":
            ["pycody=codigofacilito.__main__:main"]
    },
    version = VERSION,
    ...
Para este ejemplo le indico a Python que, cuando el comando pycody se ejecute en terminal se har√° el llamado de la funci√≥n main que se encuentra en el archivo __main__ del paquete codigofacilito. Recordemos que esta funci√≥n permite mostrar en consola todos los talleres pr√≥ximos en la plataforma.

Lo que resta por hacer ser√° generar el nuevo archivo .tar.gz y subirlo a los servidores. üåà

python setup.py sdist
twine upload dist/*